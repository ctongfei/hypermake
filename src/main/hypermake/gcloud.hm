# Supports Google Cloud Storage as a HyperMake file system.
# Use as follows:
# import gcloud
# object my_gc_storage = gcloud.storage(root="gs://$bucket_name/$path_prefix")
class storage(root):

    def read(file):
      abs_path=$([[ $file == gs://* ]] && echo "$file" || echo "${root%/}/$file")
      gcloud storage cat $abs_path

    # https://cloud.google.com/storage/docs/objects#simulated-folders
    def mkdir(dir):
      abs_path=$([[ $dir == gs://* ]] && echo "$dir" || echo "${root%/}/$dir")
      gcloud storage cp /dev/null "$abs_path/_\$folder\$"

    def exists(file):
      abs_path=$([[ $file == gs://* ]] && echo "$file" || echo "${root%/}/$file")
      gcloud storage ls $abs_path > /dev/null 2>&1

    def touch(file):
      abs_path=$([[ $file == gs://* ]] && echo "$file" || echo "${root%/}/$file")
      echo -n "" | gcloud storage cp - $abs_path

    def remove(file):
      abs_path=$([[ $file == gs://* ]] && echo "$file" || echo "${root%/}/$file")
      if gcloud storage ls $abs_path/ > /dev/null
      then
        gcloud storage rm -r $abs_path/
      elif gcloud storage objects describe $abs_path > /dev/null
      then
        gcloud storage rm $abs_path
      fi

    def upload(src, dst):
      abs_path=$([[ $dst == gs://* ]] && echo "$dst" || echo "${root%/}/$dst")
      if [ -d $src ]
      then
        gcloud storage cp -r $src/* $abs_path/
      else
        gcloud storage cp $src $abs_path
      fi

    def download(src, dst):
      abs_path=$([[ $src == gs://* ]] && echo "$src" || echo "${root%/}/$src")
      if gcloud storage ls $abs_path/ > /dev/null
      then
        mkdir -p $dst
        gcloud storage cp -r $abs_path/* $dst/
      elif gcloud storage objects describe $abs_path > /dev/null
      then
        gcloud storage cp $abs_path $dst
      fi
